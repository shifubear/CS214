#! /usr/bin/env python

# previous line was /usr/local/bin/python, but that might not be where your python lives.

import re
import argparse

# Create an argument parser and tell it about arguments
parser = argparse.ArgumentParser(description = 'Make code tidier.')

# positional argument for input file
parser.add_argument(
  '-f', '--file', metavar = "<file name>",
  help = 'name of input file')

# named argument for output file
parser.add_argument(
  '-o', '--out', dest = 'out_file', default = None,
  metavar = "<file name>",
  help = 'name of output file (default: use stdout)')

# spaces per tab; defaults to 4; must be an integer
parser.add_argument(
  '-t', '--tab-spaces', dest = 'tab_spaces', default = 4,
  type = int, metavar = "<integer>",
  help = 'number of spaces to use for each tab at the start of a line')

# comment characters
parser.add_argument(
  '-c', '--comment', dest = 'comment_chars', default = "#,//",
  metavar = "<comma separated list of comment characters>",
  help = 'strings to be interpreted as starting coded comments'
  )

# boolean arguments, aka flags
parser.add_argument(
  '-p', '--python',
  dest = 'python', action = "store_true",
  help = 'Tidy with python rules')

parser.add_argument(
  '-r', '--report',
  dest = 'report', action = "store_true",
  help = 'Instead of fixing the file, generate a report listing issues.')

parser.add_argument(
  '-x', '--extra',
  dest = 'extra', action = "store_true",
  help = 'Use extra features')

args = parser.parse_args()
print(args)
comment_chars = args.comment_chars.split(",")
print(comment_chars)

# This reads the entire file all at once.
# You could also read it line by line.

f = open(args.file)
contents = f.read()

modified_contents = contents

# This stub just capitalizes all c's, a's, l's, v's, i's, and n's.
# Delete these and add in your own regex substitutions.

# 1 Remove trailing spaces
modified_contents = re.sub(r'[ \t]+$','', modified_contents, 0, re.M)

# 2 Change tab to X spaces
tab_string = " " * tab_spaces
modified_contents = re.sub(r'\t+',tab_string, modified_contents)

# 3 Remove double spaces
modified_contents = re.sub(r'(\w)(  )', r"\1", modified_contents,0,re.U)

# 4 Comment characters followed by space
for i in range(0, len(comment_list)):
  if (comment_list[i] != "\n") :
    character_string = comment_list[i]
    character_string_modified = character_string + " "
    modified_contents = re.sub(character_string, character_string_modified, modified_contents, 0, re.M)

# 5 Surround operators by space
# operators = ['+', '*', '-', '/', '//', '&', '^', '~', '|',
#  '**', '<<', '>>', '=', '==', '>', '>=', '<', '<=', '%' ]
modified_contents = re.sub(r'(\+|\*|\-|\/|\&|\^|\~|\||\=|\>|\<|\%)(\w)', r'\1 \2', modified_contents, 0, re.M)
modified_contents = re.sub(r'(\w)(\+|\*|\-|\/|\&|\^|\~|\||\=|\>|\<|\%|\!)', r'\1 \2', modified_contents, 0, re.M)

# 6 Comma after space, not before
modified_contents = re.sub(r'(([ \t\r\f\v]{0,})+?),(([ \t\r\f\v]{0,})+?)', ', ', modified_contents)

# 7 No spaces before ( or atfer )
modified_contents = re.sub(r"[(](([ \t\r\f\v]{0,})+?)", '(', modified_contents)
modified_contents = re.sub(r"(([ \t\r\f\v]{0,})+?)[)]", ')', modified_contents)

# 8 No space before open parenthesis unless if for while 
# no space before parenthesis 
modified_contents = re.sub(r"\w+[(]",'(',modified_contents)
# if statement
modified_contents = re.sub(r'if[(]','if (',modified_contents)
# for statement
modified_contents = re.sub(r'for[(]','for (',modified_contents)
# while statement
modified_contents = re.sub(r'while[(]','while (',modified_contents)

# Capitlize p's too if --python is set.
if args.python:
    modified_contents = re.sub(r'([if|for|while])( \()([^\)]*)(\))', r'\1 \3', modified_contents)

if args.out_file:
    outf = open(args.out_file, "w")
    outf.write(modified_contents)
else:
    print(modified_contents)