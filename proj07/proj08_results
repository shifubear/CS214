Script started on Sat Apr 14 16:20:37 2018
[?1034hbash-3.2$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Shion Fukuzawa, for CS 214 at Calvin College.
 * Date: April 14, 2018
 ************************************************************/

import java.util.Scanner;

public class NameTester  
{
  public static void main(String[] args)
  {
     Name aName = new Name("John", "Paul", "Jones");

     assert aName.getFirst().equals("John") ;
     assert aName.getMiddle().equals("Paul") ;
     assert aName.getLast().equals("Jones") ;

     System.out.println(aName);
     assert aName.toString().equals("John Paul Jones");

     aName.setFirst("Peter");
     assert aName.getFirst().equals("Peter") ;
     aName.setMiddle("Piper");
     assert aName.getMiddle().equals("Piper") ;
     aName.setLast("Smith");
     assert aName.getLast().equals("Smith") ;
     assert aName.lfmi().equals("Smith, Peter P.");

     aName.read();
     System.out.println(aName);


      System.out.println("All tests passed!");
  }
}

// Replace this line with the declaration of class Name...
class Name {
  public Name(String first, String middle, String last)
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  }

  public String getFirst()
  {
    return myFirst;
  }

  public String getMiddle()
  {
    return myMiddle;
  }

  public String getLast() 
  {
    return myLast;
  }

  public String toString() 
  {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  }

  public void setFirst(String first) 
  {
    myFirst = first;
  }

  public void setMiddle(String middle) 
  {
    myMiddle = middle;
  }

  public void setLast(String last)
  {
    myLast = last;
  }

  public String lfmi()
  {
    return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
  }

  public void read()
  {
    Scanner keyboard = new Scanner(System.in); 
    myFirst = keyboard.next();
    myMiddle = keyboard.next();
    myLast = keyboard.next();
  }

  private String myFirst,
                 myMiddle,
                 myLast;
};
bash-3.2$ make java
make: Nothing to be done for `java'.
bash-3.2$ java NameTester
John Paul Jones
Victor Randall Smith
Victor Randall Smith
All tests passed!
bash-3.2$ exit

Script done on Sat Apr 14 16:21:20 2018
Script started on Sat Jun  2 13:46:50 2018
[?1034hbash-3.2$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Shion Fukuzawa, CS 214 at Calvin College.
-- Date: April 14, 2018
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  NAME_SIZE : constant Integer := 8;

  type Name is 
    record 
      MyFirst, MyMiddle, MyLast : String(1..NAME_SIZE);
    end record;

  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
  procedure Init (TheName : out Name; 
                    First, Middle, Last : in String) is
  begin 
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst     -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

   function getFirst(TheName : in Name) return String is
   begin
      return TheName.MyFirst;
   end getFirst;


  ----------------------------------------------
  -- getMiddle(Name) retrieves Name.myMiddle   -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myMiddle.                 -
  ----------------------------------------------

   function getMiddle(TheName : in Name) return String is
   begin
      return TheName.MyMiddle;
   end getMiddle;

  ----------------------------------------------
  -- getLast(Name) retrieves Name.myLast       -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myLast.                   -
  ----------------------------------------------

   function getLast(TheName : in Name) return String is
   begin
      return TheName.MyLast;
   end getLast;

  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

   function getFullName(TheName : in Name) return String is
   begin 
      return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;
   end getFullName;

  ----------------------------------------------
  -- setFirst(Name) sets Name.myFirst          -
  -- Receive: newFirst, new first name.        -
  -- Receive: newName, the Name to change.     -
  -- PRE: theName has been initialized.        -
  ----------------------------------------------
  procedure setFirst (newFirst : in String; newName : in out Name) is
  begin 
    Init(newName, newFirst, getMiddle(newName), getLast(newName));
  end setFirst;

  ----------------------------------------------
  -- setMiddle(Name) sets Name.myMiddle        -
  -- Receive: newMiddle, new middle name.      -
  -- Receive: newName, the Name to change.     -
  -- PRE: theName has been initialized.        -
  ----------------------------------------------
  procedure setMiddle (newMiddle : in String; newName : in out Name) is
  begin 
    Init(newName, getFirst(newName), newMiddle, getLast(newName));
  end setMiddle;

  ----------------------------------------------
  -- setLast(Name) sets Name.myLast            -
  -- Receive: newLast, new last name.          -
  -- Receive: newName, the Name to change.     -
  -- PRE: theName has been initialized.        -
  ----------------------------------------------
  procedure setLast (newLast : in String; newName : in out Name) is
  begin 
    Init(newName, getFirst(newName), getMiddle(newName), newLast);
  end setLast;

  ----------------------------------------------
  -- lfmi(Name) displays name in lfmi order.   -
  -- Receive: theName, the Name to display.    -
  -- PRE: theName has been initialized.        -
  ----------------------------------------------
  function lfmi(theName : in Name) return String is
  begin 
    return TheName.MyLast & ", " & TheName.MyFirst & " " & TheName.MyMiddle(TheName.MyMiddle'First..TheName.MyMiddle'First);
  end lfmi;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

   procedure Put(TheName : in Name) is 
   begin
    Put(TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast);
    return;
   end Put;

  ----------------------------------------------
  -- read(Name) reads a Name value from cin.   -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

   procedure read(TheName : in out Name) is 
    FirstName, MiddleName, LastName : String := "        ";  -- sets empty string 
    Chars_Read : Natural;
   begin
    Put("Enter your first name: ");
    Get_Line(FirstName, Chars_Read);
    Put("Enter your middle Name: ");
    Get_Line(MiddleName, Chars_Read);
    Put("Enter your last Name: ");
    Get_Line(LastName, Chars_Read);
      
    TheName.MyFirst := FirstName;
    TheName.MyMiddle := MiddleName;
    TheName.MyLast := LastName;
   end read;



begin
   Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");
   Put(aName); New_line;
   Put("All tests passed!"); New_line;

   setFirst("Phil    ", aName);
   pragma Assert( getFirst(aName) = "Phil    ", "setFirst() failed");
   setMiddle("Derek   ", aName);
   pragma Assert( getMiddle(aName) = "Derek   ", "setMiddle() failed");
   setLast("Adams   ", aName);
   pragma Assert( getLast(aName) = "Adams   ", "setLast() failed");
   pragma Assert( lfmi(aName) = "Adams   , Phil     D");
   
   Read(AName);
   Put(aName); New_line;

end name_tester;

bash-3.2$ gnatmake name_tester.adb
gnatmake: "name_tester" up to date.
bash-3.2$ ./name_tester
John     Paul     Jones   
All tests passed!
Enter your first name: Shion
Enter your middle Name: Joel
Enter your last Name: Fukuzawa
Shion    Joel     Fukuzawa
bash-3.2$ 
bash-3.2$ exit

Script done on Sat Jun  2 13:47:26 2018
;;; nameTester.el simulates and tests an e-LISP Name type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Shion Fukuzawa, CS 214 at Calvin College
;;; Date: April 14, 2018


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Name constructs a name from three strings.      ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Name (first middle last)
  "Constructs a name from three strings."
  (list first middle last))
Name



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst extracts the first name of a name object.;
;;; Receive: theName, a Name.                       
;;; Return: the first string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFirst (theName)
  "Extracts the first name of a name object."
  (car theName))
getFirst



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle extracts the middle name of a name object.
;;; Receive: theName, a Name.                      
;;; Return: the second string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getMiddle (theName)
  "Extracts the middle name of a name object."
  (car (cdr theName)))
getMiddle


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast extracts the last name of a name object.
;;; Receive: theName, a Name.                    
;;; Return: the third string in theName.       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getLast (theName)
  "Extracts the last name of a name object."
  (car (cdr (cdr theName))))
getLast



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName returns a full name in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFullName (theName)
  "Returns a full name in F-M-L order."
  (concat (getFirst theName) " " (getMiddle theName) " " (getLast theName)))
getFullName


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi returns a full name in L-F-M(initial) order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lfmi (theName)
  (concat (getLast theName) ", " (getFirst theName) " " (substring (getMiddle theName) 0 1)))
lfmi


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName returns the input and changes the name 
;;; Receive: theName           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun readName (theName)
  (setf (nth 0 theName)(read-string "First: "))
  (setf (nth 1 theName)(read-string "Middle: "))
  (setf (nth 2 theName)(read-string "Last: ")))
readName

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName displays a name object.         
;;; Receive: theName, a Name,                 
;;;          buffer, the name of a buffer.   
;;; Output: the strings in theName to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun printName (theName buffer)
  "Displays a name object."
  (princ (getFullName theName) buffer)
  theName)
printName



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver for our Name functions. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (require 'cl)                              ; assert
  (setq aName (Name "John" "Paul" "Jones"))  ; build a Name

  (assert (equal (getFirst aName) "John" ))  ; test it
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFullName aName) "John Paul Jones" ))

  ;;test the lfmi function
  (assert (equal (lfmi aName) "Jones, John P"))

  ;;Test the read function
  (readName aName)
  
  (setq buf (get-buffer "nameTester.el"))    ; buf = this buffer
  (assert (eq (printName aName buf) aName) ) ; output
  (terpri buf)                               ; newline
  (princ "All tests passed!" buf)            ; feedback
  (terpri buf))                              ; newline
Shion M Fukuzawa
All tests passed!
t










 




Script started on Sat Jun  2 14:02:51 2018
[?1034hbash-3.2$ cat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Shion Fukuzawa, for CS 214 at Calvin College.
# Date: April 14, 2018
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name 
    def initialize(first, middle, last)
        @first, @middle, @last = first, middle, last
    end

    attr_reader :first, :middle, :last

    def fullName
        @first + " " + @middle + " " + @last
    end

    def lfmi
        @last + ", " + @first + " " + @middle[0]
    end

    def read
        puts "Enter the first name: "
        firstName = gets.chomp.to_s
        puts "Enter the middle name: "
        middleName = gets.chomp.to_s
        puts "Enter the last name: "
        lastName = gets.chomp.to_s
        @first = firstName
        @middle = middleName
        @last = lastName
    end

    def print
        puts fullName
        fullName
    end
 end

def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.lfmi == "Jones, John P", "lfmi failed"
   assert name.print == "John Paul Jones", "print failed"
   
   name.read()
   name.print

   print "All tests passed!\n"
end

testName

bash-3.2$ ruby NameTester.rb
John Paul Jones
Enter the first name: 
John
Enter the middle name: 
Paul
Enter the last name: 
Jones
John Paul Jones
All tests passed!
bash-3.2$ exit

Script done on Sat Jun  2 14:03:12 2018
