Script started on Sat Jun 23 18:14:29 2018
[?1034hbash-3.2$ javac proj09.java
bash-3.2$ cat proj09.java
/* proj09.java searches the  values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
 * Date: June 23, 2018
 */

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Collections;

public class proj09 {

  public static void main(String [] args) {
    // define list1, list2, list3 here ...
    LinkedList<Integer> list1 = new LinkedList<Integer>();
    LinkedList<Integer> list2 = new LinkedList<Integer>();
    LinkedList<Integer> list3 = new LinkedList<Integer>();
    LinkedList<Integer> list4 = new LinkedList<Integer>();

    list1.add(99);    // 99, 88, 77, 66, 55
    list1.add(88);    // max is first
    list1.add(77);
    list1.add(66);  
    list1.add(55);
    System.out.println("Max of list1: " + Collections.max(list1));


    list2.add(55);    // 55, 66, 77, 88, 99
    list2.add(66);    // max is last
    list2.add(77);  
    list2.add(88);  
    list2.add(99);
    System.out.println("Max of list2: " + Collections.max(list2));

  
    list3.add(55);    // 55, 77, 99, 88, 66
    list3.add(77);    // max is in the middle
    list3.add(99);  
    list3.add(88);  
    list3.add(66);
    System.out.println("Max of list3: " + Collections.max(list3));

    list4.add(77);
    list4.add(55);
    list4.add(66);
    list4.add(88);
    list4.add(100);
    System.out.println("Max of list4: " + Collections.max(list4)); 

  
    print(list1); 
    print(list2); 
    print(list3);
    print(list4);

    System.out.println("Using search function to locate position of 99: ");
    System.out.print("list1's item 99 is at position: ");
    System.out.println(search(list1, 99));
    System.out.print("list2's item 99 is at position: ");
    System.out.println(search(list2, 99));
    System.out.print("list3's item 99 is at position: ");
    System.out.println(search(list3, 99));
    System.out.print("list4's item 99 is at position: ");
    System.out.println(search(list4, 99));


   // display maxima of the 3 lists...
  }

  /** print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   * Postcondition: the Integer values in aList
   *                 have been displayed to System.out,
   *                 separated by spaces.
   */
    public static void print(LinkedList<Integer> aList) {
	Iterator<Integer> listIterator = aList.iterator();
	while (listIterator.hasNext()){
	    System.out.print(listIterator.next() + " ");
	}
	System.out.print('\n');
   }

    // search() searches through list to find posisition of item
    //
    // @param: aList, a LinkedList<Integer>, and aValue, an Integer
    // Return: Position of item in list, an integer
    //

    
    public static int search(LinkedList<Integer> aList, Integer aValue){
	Iterator<Integer> listIterator = aList.iterator();
	int position = -1;
	int index = 0;
	while (listIterator.hasNext()){
	    if( aValue == listIterator.next()){
		 position = index;
		 return position;
	    }
	    index++;
	}
	return position;
    }  
}
bash-3.2$ java proj09
Max of list1: 99
Max of list2: 99
Max of list3: 99
Max of list4: 100
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
77 55 66 88 100 
Using search function to locate position of 99: 
list1's item 99 is at position: 0
list2's item 99 is at position: 4
list3's item 99 is at position: 2
list4's item 99 is at position: -1
bash-3.2$ exit

Script done on Sat Jun 23 18:15:07 2018
Script started on Sat Jun 23 18:15:32 2018
[?1034hbash-3.2$ cat list_package.ads list_package.adb
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
-- Date: June 23, 2018
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List);


  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer;
  
  -----------------------------------------------------
  -- Find the postiion of value in a list            --
  -- Reiceve: a_List, a list, and aValue, an integer --
  -- Return: Position of aValue in list, an integer  --
  -----------------------------------------------------
    
  function Search(A_List : in List; A_Value : in Integer) return Integer;
  
  
  
private
   type List_Node;
   type Node_Ptr is access List_Node;
   type List_Node is
      record
	 Its_Value : Integer;
	 Its_Next : Node_Ptr;   
      end record;
   
   type List is
      record
	 Its_First : Node_Ptr;
	 Its_Last : Node_Ptr;
	 Its_Length : Integer;
	 Max_Value : Integer;
	 Position : Integer;
	 Index : Integer;
      end record;
   
   
   -- replace this line with a dec of Node_Ptr
   -- replace this line with a full dec of List_Node
   -- replace this line with a full dec of List

end List_Package;

-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
-- Date: June 23, 2018
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  
  procedure Put(A_List : in List) is
     Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin 
     while Temp_Ptr /= null loop
	Put(' '); Put(Temp_Ptr.Its_Value);
        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
   end Put;


  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
   
   function Max(A_List : in List) return Integer is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
      Max_Value : Integer := -9999999;
   begin
      while Temp_Ptr /= null loop
	 if Temp_Ptr.Its_Value > Max_Value then
	   Max_Value := Temp_Ptr.Its_Value;
	 end if;
	 Temp_Ptr := Temp_Ptr.Its_Next;
      end loop;
      return Max_Value;
   end Max;
   
  -----------------------------------------------------
  -- Find the postiion of value in a list            --
  -- Reiceve: a_List, a list, and aValue, an integer --
  -- Return: Position of aValue in list, an integer  --
  -----------------------------------------------------
   
   function Search(A_List : in List; A_Value : in Integer) return Integer is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
      Position : Integer := -1;
      Index : Integer := 0;
   begin 
      while Temp_Ptr /= null loop
	 if A_Value = Temp_Ptr.Its_Value then
	    Position := Index;
	    return Position;
	 end if;
	 Index := Index + 1;
	 Temp_Ptr := Temp_Ptr.Its_Next;
      end loop;
      return Position;
   end Search;
   
   
end List_Package;
bash-3.2$ cat proj09.adb
-- proj09.adb finds the item of a list of integers using search function 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
-- Date: June 23, 2018
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure proj09 is 
                              -- define 3 lists 
  List1, List2, List3, list4 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3);
  Init(List4);
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 
  
  Append(77, List4);
  Append(88, List4);
  Append(55, List4);
  Append(66, List4);
  Append(22, List4);
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
  Put(List4); New_Line;
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 
  Put("The maximum value in list 4 is ");
  Put( Max(List4) );
  New_Line;
  
  Put("Using search function to locate position of 99: "); New_Line;
  Put("list1's item 99 is at position: ");
  Put(Search(List1, 99)); New_Line;
  Put("list2's item 99 is at position: ");
  Put(Search(List2, 99)); New_Line;  
  Put("list3's item 99 is at position: ");
  Put(Search(List3, 99)); New_Line;  
  Put("list4's item 99 is at position: ");
  Put(Search(List4, 99)); New_Line;

  
  
 
end proj09; 

bash-3.2$ make
gcc -c -Wall proj09.adb
gcc -c -Wall list_package.adb
gnatbind  proj09.ali
gnatlink  proj09.ali -o adaMax
bash-3.2$ ./adaMax
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
          77          88          55          66          22
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The maximum value in list 4 is          88
Using search function to locate position of 99: 
list1's item 99 is at position:           0
list2's item 99 is at position:           4
list3's item 99 is at position:           2
list4's item 99 is at position:          -1
bash-3.2$ exit

Script done on Sat Jun 23 18:17:15 2018
Script started on Sat Jun 23 18:18:59 2018
[?1034hbash-3.2$ cat mylist.el
;;; mylist.el is a "module" of list operations.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
;;; Date: June 23, 2018

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Max2 finds the maximum of two values.       ;;
;;; Receive: val1, val2, two values.            ;;
;;; PRE: val1 and val2 can be compared using <. ;;
;;; Return: the maximum of val1 and val2.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Max2 (val1 val2)nil
  (if (> val1 val2)
      val1
    val2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Max finds the maximum value in a list.         ;;
;;; Receive: aList, a list of values.              ;;
;;; PRE: values in aList can be compared using <.  ;;
;;; Return: the maximum value in aList.            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Max (aList)
  (if (listp aList)
      (if (= (length aList) 1)
	  (car aList)
	(Max2 (car aList) (Max (cdr aList))))
    nil))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;Search finds the position of an item in the list
;;;Recieve: aList, a list of values, value, the value to search for,
;;; and counter, an iterator 
;;;Return: The posistion of item given 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun search (aList value counter)
  (if (listp aList)
      (if (not (null aList))
	  (if (/= (car aList) value)
	      (searchlist (cdr aList) value (+ 1 counter))
	    (princ counter)
	    )
	(princ -1)
	)
    )
  )
bash-3.2$ cat max.el
;;; max.el searches a list for its maximum value.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
;;; Date: June 23, 2018

(setq load-path (list "."))              ; setup load-path to WD
(".")

(load "mylist.elc")                      ; load module
t


;;;;;;;;;;;;;;;;;;;;;;;;;
;;; test function Search. ;;
;;;;;;;;;;;;;;;;;;;;;;;;

(progn
  (let
      ((buf (get-buffer "proj09.el"))       ; setup for output
       (list1 (list 99 88 77 66 55))     ; max is first
       (list2 (list 55 66 77 88 99))     ; max is last
       (list3 (list 55 77 99 88 66))
       (list4 (list 77 55 66 22 88)))    ; max in middle

    (princ list1 buf)                    ; print list1
    (terpri buf)                         ;  and a newline

    (princ list2 buf)                    ; print list2
    (terpri buf)                         ;  and a newline

    (princ list3 buf)                    ; print list3
    (terpri buf)                         ;  and a newline

    (princ list4 buf)
    (terpri buf)
  
    (princ "The max in list 1 is " buf)  ; print the max
    (princ (Max list1) buf)              ;  in list1
    (terpri buf)                         ;  and a newline
    (princ "The max in list 2 is " buf)  ; print the max
    (princ (Max list2) buf)              ;  in list2
    (terpri buf)                         ;  and a newline
    (princ "The max in list 3 is " buf)  ; print the max
    (princ (Max list3) buf)
    (terpri buf)
    (princ "The max in list 4 is " buf)
    (princ (Max list4) buf)
    (terpri buf)
    (princ "The item 99 in list 1 is at location: ")
    (princ (searchlist list1 99 0) buf)
    (terpri buf)
    (princ "The item 99 in list 2 is at location: ")
    (princ (searchlist list2 99 0) buf)
    (terpri buf)
    (princ "The item 99 in list 3 is at location: ")
    (princ (searchlist list3 99 0) buf)
    (terpri buf)
    (princ "The item 99 in list 4 is at location: ")
    (princ (searchlist list4 99 0) buf)
    (terpri buf)))
(99 88 77 66 55)
(55 66 77 88 99)
(55 77 99 88 66)
(77 55 66 22 88)
The max in list 1 is 99
The max in list 2 is 99
The max in list 3 is 99
The max in list 4 is 88
The item 99 in list 1 is at location: 0
The item 99 in list 2 is at location: 4
The item 99 in list 3 is at location: 2
The item 99 in list 4 is at location: -1
t





bash-3.2$ exit

Script done on Sat Jun 23 18:19:10 2018
Script started on Sat Jun 23 18:19:54 2018
[?1034hbash-3.2$ cat List.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
# Date: June 23, 2018
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

  def initialize()
    @first = nil
    @last = nil
    @length = 0
  end
  
   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0

   # Replace this line with a List constructor definition


   attr_reader :length

   # Replace this line with a statement to define a 'length' reader method


   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print
     temp = @first
     while !temp.nil?
       printf " #{temp.value}"
       temp = temp.next
     end
   end


     
   # find my maximum item
   # Return: my maximum item

     def max
       temp = @first
       maxValue = -9999999
       while !temp.nil?
         if temp.value > maxValue
           maxValue = temp.value
         end
         temp = temp.next
       end
       return maxValue
     end


     # search: find the item given as a variable
     # recieve: aValue (the item to search for)
     # return's the position of aValue in list 
     
     def search(aValue)
       position = -1
       index = 0
       temp = @first
       while !temp.nil?
         if aValue == temp.value
           position = index
           return position
         end
         index = index + 1
         temp = temp.next
       end
       return position
     end
     
end

class Node
      def initialize(item, link)
        @value = item
         @next = link
      end
      attr_reader :value
      attr_accessor :next
end
 
bash-3.2$ cat proj09.rb
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: Shion Fukuzawa, CS 214 at Calvin College. 
# Date: June 23, 2018

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(66).append(77).append(88).append(55).append(22)

list1.print 
puts
puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

list4.print
puts
puts "Maximum of list4: #{list4.max}"

puts list1.search(99)
puts list2.search(99)
puts list3.search(99)
puts list4.search(99)
bash-3.2$ ./[K[Kruby proj09.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
 66 77 88 55 22
Maximum of list4: 88
0
4
2
-1
bash-3.2$ exit

Script done on Sat Jun 23 18:20:10 2018
